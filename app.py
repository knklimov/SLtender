
import streamlit as st
import openpyxl
from openpyxl.styles import PatternFill
import io

# –¶–≤–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ARGB
TARGET_GREEN = "FF5AFC4C"
TARGET_YELLOW = "FFFCF74C"
TARGET_RED = "FFFC4C4C"

def process_excel(data_file, plan_file, yellow_step, red_step):
    wb_data = openpyxl.load_workbook(data_file)
    wb_plan = openpyxl.load_workbook(plan_file)
    modifications = []

    for sheet_name in wb_data.sheetnames:
        if sheet_name not in wb_plan.sheetnames:
            st.warning(f"–õ–∏—Å—Ç '{sheet_name}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ñ–∞–π–ª–µ —Å –º–∏–Ω–∏–º—É–º–∞–º–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        ws_data = wb_data[sheet_name]
        ws_plan = wb_plan[sheet_name]

        if ws_data.max_row != ws_plan.max_row or ws_data.max_column != ws_plan.max_column:
            st.warning(f"–†–∞–∑–º–µ—Ä—ã –ª–∏—Å—Ç–∞ '{sheet_name}' –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        for row in ws_data.iter_rows(min_row=2):
            for cell in row:
                fill = cell.fill
                if fill and fill.fill_type == "solid" and fill.fgColor and fill.fgColor.rgb:
                    color = fill.fgColor.rgb
                    if not (color and isinstance(color, str)):
                        continue
                    color = color.upper()
                    if color == TARGET_GREEN:
                        continue

                    try:
                        original_value = cell.value
                        min_cell = ws_plan[cell.coordinate]
                        min_value = min_cell.value

                        if not (isinstance(original_value, (int, float)) and isinstance(min_value, (int, float))):
                            continue

                        if color == TARGET_YELLOW:
                            new_value = max(original_value - yellow_step, min_value)
                        elif color == TARGET_RED:
                            new_value = max(original_value - red_step, min_value)
                        else:
                            continue  # –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç

                        if new_value != original_value:
                            cell.value = new_value
                            modifications.append((sheet_name, cell.coordinate, original_value, new_value, color, min_value))

                    except Exception:
                        pass

    output = io.BytesIO()
    wb_data.save(output)
    output.seek(0)
    return output, modifications

st.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Excel –ø–æ —Ü–≤–µ—Ç—É —Å —Ä–∞–∑–Ω—ã–º–∏ —à–∞–≥–∞–º–∏ –∏ –º–∏–Ω–∏–º—É–º–∞–º–∏")

yellow_step = st.number_input("–®–∞–≥ —Å–Ω–∏–∂–µ–Ω–∏—è –¥–ª—è –ñ–Å–õ–¢–û–ì–û —Ü–≤–µ—Ç–∞", min_value=1, max_value=10000, value=3)
red_step = st.number_input("–®–∞–≥ —Å–Ω–∏–∂–µ–Ω–∏—è –¥–ª—è –ö–†–ê–°–ù–û–ì–û —Ü–≤–µ—Ç–∞", min_value=1, max_value=10000, value=5)

plan_file = st.file_uploader("üî¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏", type=["xlsx"])
data_file = st.file_uploader("üéØ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ü–≤–µ—Ç–∞)", type=["xlsx"])



if plan_file and data_file:
    processed_file, log = process_excel(data_file, plan_file, yellow_step, red_step)

    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª",
        data=processed_file,
        file_name="output_modified.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    if log:
        st.write("–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —è—á–µ–π–∫–∏:")
        st.dataframe(
            {"–õ–∏—Å—Ç": [x[0] for x in log],
             "–Ø—á–µ–π–∫–∞": [x[1] for x in log],
             "–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": [x[2] for x in log],
             "–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": [x[3] for x in log],
             "–¶–≤–µ—Ç": [x[4] for x in log],
             "–ú–∏–Ω–∏–º—É–º": [x[5] for x in log]}
        )
    else:
        st.success("–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
